#Funcion imaginaria 1
#funcion imaginaria 2
#nueva funcion
#nueva funcion otra vez2
=======
#Funcion imaginaria3
#Feature/funcion3

#Feature/funcion3 con [d]git merge --no-ff f/l 
#Feature/funcion3 con [d]git merge --no-ff f/l 2

#INVIERTE UN NUMERO
numeroInvertido=(numero)->
  res=0
  while numero>0
    res=(res*10)+(numero%10)
    numero=numero//10

  res

#SI ES ESPEJO
numeroEspejo = (numero)->
 res = false
 if numero < 10 or esPar numero
  res = false
 else
  num = numeroInvertido numero
  if num is numero
       res = true

#FUNCION QUE VERIFICA SI UN NUMERO ES PAR
esPar = (numero)->
 res = false
 digitos = 0
 while numero > 0
  digitos = digitos + 1
  numero = numero // 10

 if digitos % 2 is 0
  res = true

 res


#funcion que verifica si un numero es impar
impar=(numero)->
 res=true 
 if numero % 2 is 0
   res =false

 res


multiploDe = (numero) ->
 res = ""
 num = 1      
 while num <= numero
  if numero % num is 0
   res = res + num + "; "

  num = num + 1

 return res

natural = (numero) ->
 res = false
 if numero > 0
  res = true

 return res

#<<<<<<< HEAD
# Devuelve si un numero es o no primo
esPrimo= (num) -> 
  resp=true
  resp= false for i in [2..num-1] when num%i==0
  resp= true if num==1 
  resp

#=======
#primos de 1 a max
primos= (max) -> ( num for num in [1..max*10] when esPrimo(num) && _results.length <max) 
#>>>>>>> funcion que devuelve loss primero n primos


#alert multiploDe 10
#alert numeroInvertido 1234567
#alert numeroEspejo 12321
#<<<<<<< HEAD
#alert esPrimo 5
#=======
#alert primos 10
#>>>>>>> funcion que devuelve los primero n primos
